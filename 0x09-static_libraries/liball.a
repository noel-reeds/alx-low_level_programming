!<arch>
0-isupper.c/    0           0     0     644     234       `
#include "main.h"
/**
* _isupper - entry point to print uppercase.
*
*@c: The parameter to print.
*
* Return: Always returns 0 for success.
*/
int _isupper(int c)
{
	if (c >= 'A' && c <= 'Z')
	{
		return (1);
	}
	else
		return (0);
}
0-memset.c/     0           0     0     644     373       `
#include "main.h"
#include <stdlib.h>
/**
  * _memset - fills memory with a constant byte.
  *
  *@b: byte to fill memory.
  *
  *@n: number of bytes.
  *
  *@s: array of string
  *
  *Return: Returns a pointer to the memory area s.
  */
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int num;

	for (num = 0; num < n; num++)
	{
		s[num] = b;
	}
	return (s);
}

0-strcat.c/     0           0     0     644     42        `
char *_strcat(char *dest, char *src)
{

}
1-isdigit.c/    0           0     0     644     209       `
#include "main.h"
/**
  * _isdigit - checks for a digit.
  *
  *@c: parameter to print.
  *
  *Return: Always 0.
  */
int _isdigit(int c)
{
	if (c >= '0' && c <= '9')
	{
		return (1);
	}
	else
		return (0);
}

1-memcpy.c/     0           0     0     644     386       `
#include "main.h"
#include <string.h>
/**
  * _memcpy - copies the memory area.
  *
  *@dest: memory area to copy to.
  *
  *@src: memory area to copy from.
  *
  *@n: number of bytes.
  *
  *Return: Returns a pointer to dest.
  */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int num;

	for (num = 0; num < n; num++)
	{
		dest[num] = src[num];
	}
	return (dest);
}
1-strncat.c/    0           0     0     644     50        `
char *_strncat(char *dest, char *src, int n)
{

}
100-atoi.c/     0           0     0     644     838       `
#include "main.h"
#include <stdio.h>
/**
  * _atoi - converts string to integer.
  *
  *@s: string to be converted to integer.
  *
  *Return: The converted integer value.
  */
int _atoi(char *s)
{
	int len;
	unsigned int elem;
	int index;
	int neg;

	elem = 0;
	neg = 0;
	len = _strlen(s);
	for (index = 0; index <= len; index++)
	{
		if (s[index] >= '0' && s[index] <= '9')
		{
			elem *= 10;
			elem = elem + (s[index] - '0');
			if (!(s[index + 1] >= '0' && s[index + 1] <= '9'))
			{
				break;
			}
		}
		if (s[index] == '-')
		{
		neg++;
		}
	}
	if (neg % 2 != 0)
	{
		elem = -elem;
	}
	return (elem);
}
/**
  * _strlen - entry point of a program.
  *
  *@s: parameter.
  *
  *Return: returns count.
  */
int _strlen(char *s)
{
	int index;
	int count = 0;

	for (index = 0; s[index] != '\0'; index++)
		count++;

	return (count);
}
2-strchr.c/     0           0     0     644     390       `
#include "main.h"
#include <string.h>
/**
  * _strchr - locates a character in a string.
  *
  *@s: string to search character from.
  *
  *@c: character to be checked
  *
  *Return: return NULL if no character in string.
  */
char *_strchr(char *s, char c)
{
	int index;

	for (index = 0; s[index] >= '\0'; index++)
	{
		if (s[index] == c)
		{
			return (&s[index]);
		}
	}
	return (0);
}
2-strlen.c/     0           0     0     644     246       `
#include "main.h"
/**
  * _strlen - entry point of a program.
  *
  *@s: parameter.
  *
  *Return: returns count.
  */
int _strlen(char *s)
{
	int index;
	int count = 0;

	for (index = 0; s[index] != '\0'; index++)
		count++;

	return (count);
}
2-strncpy.c/    0           0     0     644     50        `
char *_strncpy(char *dest, char *src, int n)
{

}
3-islower.c/    0           0     0     644     25        `
int _islower(int c)
{

}

3-puts.c/       0           0     0     644     240       `
#include "main.h"
/**
* _puts - entry point of a C program.
*
*@str: parameter.
*
*Return: returns void.
*/
void _puts(char *str)
{
	int index;

	for (index = 0; str[index] != '\0'; index++)
	{
		_putchar(str[index]);
	}
	_putchar('\n');
}
3-strcmp.c/     0           0     0     644     37        `
int _strcmp(char *s1, char *s2)
{

}

3-strspn.c/     0           0     0     644     705       `
#include "main.h"
#include <string.h>
/**
  * _strspn - get length of a prefix substring
  *
  *@s: string to examine.
  *
  *@accept: substring to examine from s.
  *
  *Return: returns number of occurence of accept from s.
  */
unsigned int _strspn(char *s, char *accept)
{
	unsigned int index;
	unsigned int elem;
	unsigned int len_s = strlen(s);
	unsigned int len_a = strlen(accept);
	unsigned int count = 0;

	if (len_s != 0 || len_a != 0)
	{
		for (index = 0; index < len_s; index++)
		{
			for (elem = 0; elem < len_a; elem++)
			{
				if (s[index] == accept[elem])
				{
					count++;
					break;
				}
			}
			if (elem == len_a)
			{
				break;
			}
		}
	}
	else
		return (0);
	return (count);
}

4-isalpha.c/    0           0     0     644     25        `
int _isalpha(int c)
{

}

4-strpbrk.c/    0           0     0     644     43        `
char *_strpbrk(char *s, char *accept)
{

}

5-strstr.c/     0           0     0     644     49        `
char *_strstr(char *haystack, char *needle)
{

}

6-abs.c/        0           0     0     644     21        `
int _abs(int n)
{

}

9-strcpy.c/     0           0     0     644     403       `
#include "main.h"
#include <string.h>
#include <stdio.h>
/**
  * _strcpy - copies a string from *src to *dest.
  *
  *@dest: pointer to the destination buffer
  *
  *@src: pointer to the source buffer
  *
  *Return: Pointer to dest
  */
char *_strcpy(char *dest, char *src)
{
	char *dest_init = dest;

	while (*src != '\0')
	{
		*dest = *src;
		dest++;
		src++;
	}
	*dest = '\0';
	return (dest_init);
}

_putchar.c/     0           0     0     644     239       `
#include <unistd.h>

/**
* _putchar - writes the character c to stdout
@c: The character to print
*
* Return: On success 1.
* On error, -1 is returned, and errno is set appropriately.
*/
int _putchar(char c)
{
	return (write(1, &c, 1));
}

